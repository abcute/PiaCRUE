from dataclasses import dataclass, field
from typing import Any, Dict, Optional, List
import uuid
import datetime

@dataclass
class MemoryItem:
    """
    Represents a generic item that can be stored in memory or used in results.
    """
    item_id: str = field(default_factory=lambda: str(uuid.uuid4()))
    content: Any
    metadata: Dict[str, Any] = field(default_factory=dict)
    timestamp: datetime.datetime = field(default_factory=lambda: datetime.datetime.now(datetime.timezone.utc))

@dataclass
class GenericMessage:
    """
    A generic wrapper for messages passed between PiaCML modules.
    Based on PiaCML_InterModule_Communication.md.
    """
    message_id: str = field(default_factory=lambda: str(uuid.uuid4()))
    source_module_id: str
    message_type: str # E.g., "PerceptData", "LTMQuery", "GoalUpdate"
    payload: Any # The actual specific message data (e.g., PerceptDataPayload object)
    timestamp: datetime.datetime = field(default_factory=lambda: datetime.datetime.now(datetime.timezone.utc))
    target_module_id: Optional[str] = None # Identifier of a specific target module or "BROADCAST"
    metadata: Dict[str, Any] = field(default_factory=dict) # For routing tags, priority, etc.

@dataclass
class PerceptDataPayload:
    """
    Payload for carrying structured information from the Perception module.
    Matches specification in PiaCML_InterModule_Communication.md.
    """
    percept_id: str = field(default_factory=lambda: str(uuid.uuid4()))
    modality: str # E.g., "text_input", "visual_scene_graph", "audio_features"
    content: Any # The actual data (e.g., string for text, JSON for scene graph)
    source_timestamp: datetime.datetime # When the percept was captured/generated by the sensor/source
    processing_timestamp: datetime.datetime = field(default_factory=lambda: datetime.datetime.now(datetime.timezone.utc))
    metadata: Dict[str, Any] = field(default_factory=dict) # Optional: E.g., confidence scores, sensor ID

@dataclass
class GoalUpdatePayload:
    """
    Payload for the Motivational System to communicate changes in goals.
    Matches specification in PiaCML_InterModule_Communication.md.
    Includes parent_goal_id from Motivational_System_Specification.md.
    """
    goal_id: str
    goal_description: str
    priority: float # Numerical priority (e.g., 0.0 to 1.0, or other scale)
    status: str # E.g., "new", "active", "achieved", "failed", "suspended", "updated"
    originator: str # E.g., "intrinsic_curiosity", "extrinsic_user_command"
    criteria_for_completion: Optional[str] = None
    associated_rewards_penalties: Optional[Dict[str, float]] = None
    deadline: Optional[datetime.datetime] = None
    parent_goal_id: Optional[str] = None # From Motivational_System_Specification.md

@dataclass
class LTMQueryResultPayload:
    """
    Payload for returning information from an LTM module in response to an LTMQuery.
    Matches specification in PiaCML_InterModule_Communication.md.
    """
    query_id: str # Corresponds to the query_id from the LTMQuery
    results: List[MemoryItem] # List of retrieved memory items
    success_status: bool # True if query was successful, False otherwise
    error_message: Optional[str] = None # Description of error if success_status is False
    metadata: Dict[str, Any] = field(default_factory=dict) # E.g., number of results, confidence

@dataclass
class SelfKnowledgeConfidenceUpdatePayload:
    """
    Payload for the Self-Model to communicate updates to its confidence
    in a particular piece of knowledge or a capability.
    """
    item_id: str  # ID of the knowledge concept, skill, or tool
    item_type: str  # e.g., "knowledge", "capability"
    new_confidence: float  # The updated confidence score (e.g., 0.0 to 1.0)
    previous_confidence: Optional[float] = None # Optional: good for logging change
    source_of_update: Optional[str] = None # E.g., "task_success", "user_feedback", "learning_event"


# Example LTMQueryPayload (not explicitly requested to be created in this file by the prompt,
# but useful for context with LTMQueryResultPayload).
# If needed, it would be defined here as well.
# @dataclass
# class LTMQueryPayload:
#     query_id: str = field(default_factory=lambda: str(uuid.uuid4()))
#     requester_module_id: str
#     query_type: str # E.g., "semantic_search", "episodic_retrieval_by_cue"
#     query_content: Any
#     target_memory_type: Optional[str] = None # E.g., "semantic", "episodic"
#     parameters: Dict[str, Any] = field(default_factory=dict)

# Example ActionCommandPayload (not explicitly requested by the prompt for this file)
# @dataclass
# class ActionCommandPayload:
#     command_id: str = field(default_factory=lambda: str(uuid.uuid4()))
#     action_type: str
#     target_object_or_agent: Optional[str] = None
#     parameters: Dict[str, Any] = field(default_factory=dict)
#     expected_outcome_summary: Optional[str] = None
#     priority: float = 0.5

# Example EmotionalStateChangePayload (not explicitly requested by the prompt for this file)
# @dataclass
# class EmotionalStateChangePayload:
#     current_emotion_profile: Dict[str, float] # e.g., {"valence": 0.7, "arousal": 0.5}
#     primary_emotion: Optional[str] = None
#     intensity: Optional[float] = None
#     triggering_event_id: Optional[str] = None
#     behavioral_impact_suggestions: List[str] = field(default_factory=list)

if __name__ == '__main__':
    # Test MemoryItem
    item1 = MemoryItem(content="This is a test memory item.")
    item2 = MemoryItem(item_id="custom_id_123", content={"data": [1,2,3]}, metadata={"source": "test"})
    print(item1)
    print(item2)
    assert isinstance(item1.timestamp, datetime.datetime)
    assert item1.item_id != item2.item_id

    # Test GenericMessage
    percept_payload = PerceptDataPayload(
        modality="text",
        content="Hello PiaAGI!",
        source_timestamp=datetime.datetime.now(datetime.timezone.utc) - datetime.timedelta(seconds=1)
    )
    msg1 = GenericMessage(
        source_module_id="PerceptionModule_01",
        message_type="PerceptData",
        payload=percept_payload
    )
    print(msg1)
    assert msg1.payload.modality == "text"

    # Test PerceptDataPayload
    pdp1 = PerceptDataPayload(
        modality="visual",
        content={"objects": ["cat", "table"]},
        source_timestamp=datetime.datetime.now(datetime.timezone.utc)
    )
    print(pdp1)
    assert pdp1.modality == "visual"
    assert isinstance(pdp1.processing_timestamp, datetime.datetime)

    # Test GoalUpdatePayload
    gup1 = GoalUpdatePayload(
        goal_id="goal_001",
        goal_description="Achieve world peace.",
        priority=0.99,
        status="PENDING",
        originator="GlobalConsciousness",
        criteria_for_completion="No more wars.",
        parent_goal_id="supergoal_0"
    )
    print(gup1)
    assert gup1.priority == 0.99

    # Test LTMQueryResultPayload
    mem_item_for_ltm = MemoryItem(content="Result for LTM query")
    ltm_res1 = LTMQueryResultPayload(
        query_id="query_abc",
        results=[mem_item_for_ltm, MemoryItem(content="Another result")],
        success_status=True
    )
    print(ltm_res1)
    assert len(ltm_res1.results) == 2
    assert ltm_res1.results[0].content == "Result for LTM query"

    # Test SelfKnowledgeConfidenceUpdatePayload
    skcup1 = SelfKnowledgeConfidenceUpdatePayload(
        item_id="concept_gravity",
        item_type="knowledge",
        new_confidence=0.95,
        previous_confidence=0.90,
        source_of_update="successful_experiment"
    )
    print(skcup1)
    assert skcup1.new_confidence == 0.95

    print("\nCore messages example usage complete.")
